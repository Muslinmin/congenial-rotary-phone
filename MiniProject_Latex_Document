\documentclass[a4paper,12pt]{report}
\usepackage{graphicx}
\usepackage{amsmath}
\usepackage{float}
\usepackage{listings}
\usepackage{xcolor}
\usepackage[left=25mm,right=25mm,top=5mm,bottom=25mm,paper=a4paper]{geometry}
\usepackage{hyperref}
\usepackage{tikz}

\usepackage{subcaption}

\usetikzlibrary{arrows, shapes, positioning, shapes.geometric}



\begin{document}

% Title Page
% \title{Ultrasonic Sensor Characterization and Its Application in Obstacle Detection for Firefighting Scenarios}

% \author{
%   Stafford Ho Sheng Xian \\
%   Yugendren S/O Sooriya Moorthi \\
%   Reuben Low Yu Xiang \\
%   Mohammed Muslimin Bin Mohd Saleh \\
%   Caleb Lee Jia Le
%   \\
%   \\{[RSE4501]}
% }

% \date{[29/09/24]}
% \maketitle
\begin{center}
    \Huge{Ultrasonic Sensor Characterization and Its Application in Obstacle Detection for Firefighting Scenarios}
\end{center}
\vspace{0cm}
{\let\clearpage\relax \chapter{Introduction}}
% \chapter{Introduction}

\section{Project Objectives}

\begin{itemize}
    \item Characterize the ultrasonic sensor by determining its speed of sound, minimum detectable distance, and maximum measurable range to achieve the desired accuracy.
    \item Understand the operational principles of ultrasonic sensors to optimize their performance for obstacle detection.
    \item Explore the application of ultrasonic sensors in scenarios, where systems like cameras and LiDAR fail because of smoke or dusty particles, demonstrating potential use of ultrasonic sensors
    \begin{itemize}
        \item Develop an obstacle-detection helmet for firefighters in thick smoke conditions common in firefighting scenarios        \item Review the benefits of this application and explore how similar improvements can be applied to robotics navigation systems
    \end{itemize}
\end{itemize}


\section{Background}
Ultrasonic sensors offer an advantage over LiDAR and cameras, especially in dusty or smoke-filled conditions. Unlike cameras, which rely on visibility and light, and LiDAR, which can be scattered by particles in the air, ultrasonic sensors use sound waves. This allows them to detect obstacles in environments where visual and optical methods fail.\\\\This makes ultrasonic sensors a valuable tool for applications such as firefighting, where LIDAR and cameras may not be practical.\\\\""Obstacle Helmet project description here""


\chapter{Project Components}
\section{Hardware Components}

\subsection{Microcontroller}
\begin{itemize}
    \item \textbf{Arduino Leonardo Pro Micro (Quantity: 1)}: Compact, suited for embedded applications due to its small size. It was selected for this project because of its portability and the sufficient number of I/O pins for basic control and sensor connections.
\end{itemize}

\subsection{Sensors}
The project uses the following sensors:
\begin{itemize}
    \item \textbf{Ultrasonic Sensor HC-SR04 (Quantity: 1)}: The HC-SR04 works by emitting ultrasonic sound waves and measuring the time it takes for the sound waves to reflect off an object and return to the sensor. The distance from the object can be determined by calculating the time difference, making it a reliable sensor for obstacle detection.
\end{itemize}

\subsection{Actuators}
\begin{itemize}
    \item \textbf{TowerPro SG90 Mini Micro Digital Servo 9g (Quantity: 1)}: Used to enable automated panning movements through integration with an Arduino, allowing for programmed motion control in the system.
\end{itemize}

\section{Software Components}

\subsection{Programming Language and Tools}
The project utilizes \textbf{Arduino} for ultrasonic scanning and servo control routines, while \textbf{MATLAB} provides a visual representation of the user's 120-degree field of vision on a graph.

\subsection{Libraries Used}

\begin{itemize}
    \item \textbf{stdio.h}: A standard C library used to print debugging messages, such as ultrasonic readings, to the console.
    \item \textbf{Servo.h}: A library used to control the servo motor by sending signals to set its position between 50 and 70 degrees, to emulate the user's field of vision.
\end{itemize}


\chapter{System Design and Architecture}
\section{System Block Diagram}
% Provide a block diagram illustrating the flow of information and components in the system; for example: sensor, actuator, microcontroller, and HMI (Human-Machine Interface).

This block diagram describes generally the interactions between the components. The block diagram consists of several key components, including an Arduino Leonardo microcontroller, an ultrasonic sensor, a servo motor to pan and allow ultrasonic scanning, an LED to warn the user and MATLAB for visualization.

% \begin{figure}[H]
%     \centering
%     \includegraphics[width=1\linewidth]{helmet block diagram.png}
%     \caption{Block diagram of the obstacle detection helmet.}
%     \label{fig:block diagram}
% \end{figure}

\begin{figure}[htbp]
    \begin{tikzpicture}[node distance=0.8cm, auto, scale=0.8, transform shape]
    
        % Nodes
        \node (arduino) [draw, rectangle, minimum width=2.5cm, minimum height=6cm] {Arduino Leonardo};
        \node (sensor) [draw, rectangle, left=of arduino, yshift=-1.5cm] {Ultrasonic Sensor};
        \node (power) [draw, rectangle, left=of arduino, yshift=1.5cm] {Power Supply 5V};
        \node (led) [draw, rectangle, right=of arduino, yshift=-1.5cm] {Red LED Warning Light};
        \node (motor) [draw, rectangle, right=of arduino, yshift=1.5cm] {Servo Motor};
        \node (clear) [draw, rectangle, right=of led, xshift=0cm, yshift=2.4cm] {Switches OFF as CLEAR TO PROCEED}; 
        \node (obstacle) [draw, rectangle, below=of clear, yshift=-1cm] {Facing obstacle}; 
        \node (on) [draw, rectangle, below=of obstacle] {Switches ON as warning};
        \node (matlab) [draw, rectangle, above=of arduino] {MATLAB Software};
    
        % Arrows
        \draw[<->] (sensor.east) -- ++(0.3,0) |- (arduino.west |- sensor.east);
        \draw[->] (power.east) -- ++(0.3,0) |- (arduino.west |- power.east);
        \draw[<-] (led.west) -- ++(-0.3,0) -| (arduino.east |- led.west);
        \draw[<-] (motor.west) -- ++(-0.3,0) |- (arduino.east |- motor.west);
        \draw[->] (led.east) -- (obstacle.west);
        \draw[->] (obstacle.south) -- (on.north);
        \draw[->] (obstacle.north) -- (clear.south);
        \draw[<->] (matlab.south) -- (arduino.north);
    
    \end{tikzpicture}
    \caption{Block diagram of the obstacle detection system.}
    \label{fig:obstacle_detection}
\end{figure}

\begin{itemize}
    \item \textbf{Power Supply 5V}: 
        \begin{itemize}
            \item \textbf{Input}: The system is powered by a 9V battery, which is stepped down to 5V using voltage regulator. This 5V supply is fed to the Arduino Leonardo and all connected peripherals (Ultrasonic sensor, Servo Motor, and Red LED Warning Light).
            \item \textbf{Output}: Provides regulated 5V power to the entire system, ensuring all components receive stable voltage for operation.
        \end{itemize}
    
    \item \textbf{Ultrasonic Sensor}: 
        \begin{itemize}
            \item \textbf{Input}: The sensor receives a control signal from the Arduino Leonardo to trigger the emission of an ultrasonic pulse.
            \item \textbf{Output}: The sensor measures the time-of-flight (TOF) of the pulse, calculates the distance to an obstacle, and sends the distance data back to the Arduino Leonardo for processing.
        \end{itemize}

    \item \textbf{Arduino Leonardo}:
        \begin{itemize}
            \item \textbf{Input}: 
    \begin{itemize}
        \item Distance data from the ultrasonic sensor.
        \item Control signals from MATLAB for visualization and system adjustments.
        \end{itemize}
        \item \textbf{Output}: 
            \begin{itemize}
                \item Sends control signals to the servo motor to pan the ultrasonic sensor for scanning.
                \item Activates the red LED warning light when an obstacle is detected.
                \item Transmits distance and angle data to MATLAB for real-time visualization.
            \end{itemize}

    \end{itemize}

    \item \textbf{Servo Motor}:
        \begin{itemize}
            \item \textbf{Input}: Receives control signals from the Arduino Leonardo to rotate the ultrasonic sensor to different angles, allowing for a wide field of view during obstacle detection.
            \item \textbf{Output}: Adjusts the physical angle of the ultrasonic sensor, enabling the system to scan a larger area for obstacles.
        \end{itemize}

    \item \textbf{Red LED Warning Light}:
        \begin{itemize}
            \item \textbf{Input}: Receives a control signal from the Arduino Leonardo to turn on when an obstacle is detected.
            \item \textbf{Output}: Provides a visual alert to the user by turning on the red LED when an obstacle is within a predefined distance. If no obstacle is detected, the LED remains off.
        \end{itemize}

    \item \textbf{MATLAB Software}:
        \begin{itemize}
            \item \textbf{Input}: Receives distance and angle data from the Arduino Leonardo via serial communication.
            \item \textbf{Output}: Displays real-time visualizations of the scanned environment in the form of polar plots.
        \end{itemize}

\end{itemize}

% \begin{itemize}
%     \item \textbf{Power Supply}: 
%         \begin{itemize}
%             \item 
%         \end{itemize}The system is powered by a 5V power supply that provides the necessary voltage to the Arduino Leonardo and its connected peripherals.
    
%     \item \textbf{Ultrasonic Sensor}: The ultrasonic sensor, mounted on a servo motor, sends distance measurements to the Arduino Leonardo. The sensor continuously relays these distance measurements to the microcontroller for processing.

%     \item \textbf{Arduino Leonardo}: The Arduino Leonardo interprets the distance data from the ultrasonic sensor and controls the servo motorâ€™s position. Based on the distance data, it decides whether to activate the red LED warning light if an obstacle is detected within a threshold distance. It also communicates with the MATLAB software for real-time data visualization.

%     \item \textbf{Servo Motor}: The servo motor is controlled by the Arduino to pan the ultrasonic sensor across a wider field of view for obstacle detection.

%     \item \textbf{Red LED Warning Light}: If the Arduino determines that an obstacle is within a predefined distance, it switches on the red LED warning light to notify the user. If the path is clear, the LED remains off.

%     \item \textbf{MATLAB Software}: The MATLAB software receives distance and angle data from the Arduino Leonardo, processes it, and generates real-time visualizations. The software aids in visualizing the scanned environment, providing the user with immediate feedback on the surrounding obstacles.

% \end{itemize}

\section{Circuit Diagram}
% Include a schematic of the circuit showing the connections between the sensor, actuators, HMI, and microcontroller.

\textbf{The following description might not be applicable once pictorial diagram is not used.} \\

%  Remove if page exceeds 15
The circuit diagram is designed for compactness and clarity. This is to ensure that the wiring is organized for ease of troubleshooting and maintenance. The overall circuit design is laid out on a breadboard which facilitates rapid prototyping where the modular approach allows for easy reconfiguration or replacement of each component.

\begin{figure}[H]
    \centering
    \includegraphics[width=1\linewidth]{Circuit_schem.png}
    \caption{Helmet circuit diagram.}
    \label{fig:enter-label}
\end{figure}

The following colour coding scheme has been adopted in the wiring to ensure clarity and to minimize errors during component integration and troubleshooting:
\begin{itemize}
    \item 
\end{itemize}

\chapter{Implementation}
\section{Overview}
The implementation consists of two main parts. The first part involves testing the sensor's accuracy and making changes to the speed of sound in the code, including proximity and maximum range tests.\\\\The second part integrates the sensor with a servo, developing a warning system and visualizing the user's field of vision using a MATLAB graph.
\section{Sensor Characterization}

To understand the accuracy and performance of the ultrasonic sensor, we first determine the equation used for calculating distance. The fundamental equation for calculating the distance from the sensor is:

\[
d = \frac{v \cdot t}{2}
\]
where:
\begin{itemize}
  \item $d$ is the distance (in meters),
  \item $v$ is the speed of sound (in meters per second),
  \item $t$ is the time taken for the sound to return (in seconds).
\end{itemize}

\subsection{Linear Equation Formulation}

When re-arranging the formula, we can express it in a linear form, comparable to the equation \( y = mx + c \), where:
\[
d = \frac{v}{2} \cdot t + 0
\]
In this case:
\begin{itemize}
  \item $d$ is the dependent variable (distance),
  \item $t$ is the independent variable (time),
  \item The slope \(m = \frac{v}{2}\) represents half the speed of sound.
\end{itemize}

Thus, plotting distance against time results in a straight line, with the gradient being proportional to the speed of sound. Any discrepancy in the assumed speed of sound will be reflected in the slope of the line. If we assume a speed of sound that is incorrect for the testing conditions (e.g., atmospheric pressure, temperature), we will observe an error in the gradient of the line, causing inaccurate distance measurements.

\subsection{Effect of Incorrect Speed of Sound Assumption}

For instance, comparing two cases:
\begin{itemize}
  \item Using the correct speed of sound, $v = 343 \, \text{m/s}$ (standard at room temperature),
  \item Using an incorrect speed of sound, $v = 330 \, \text{m/s}$ (for colder conditions).
\end{itemize}

As shown in Figure~\ref{fig:sound_graph}, the difference between the two lines increases as the actual distance increases. The difference in calculated distances is proportional to the actual distance, leading to larger distortions for larger distances.

\begin{figure}
    \centering
    \includegraphics[width=0.5\linewidth]{image.png}
    \caption{Comparison between slopes of two different speeds}
    \label{fig:enter-label}
\end{figure}

\subsection{Test Data Analysis}

To further validate this, we conducted tests with distances ranging from 10 cm to 300 cm. The results showed increasing distortion from the expected values as the distance increased, particularly due to the incorrect assumption of the speed of sound.

\begin{table}[h!]
\centering
\caption{Test Data for Distance Measurement (10 cm to 300 cm)}
\begin{tabular}{|c|c|c|}
\hline
\textbf{Actual Distance (cm)} & \textbf{Expected Distance (cm)} & \textbf{Measured Distance (cm)} \\ \hline
10                            & 10                             & 10.1                            \\ \hline
50                            & 50                             & 50.5                            \\ \hline
100                           & 100                            & 102                             \\ \hline
150                           & 150                            & 154                             \\ \hline
200                           & 200                            & 208                             \\ \hline
250                           & 250                            & 260                             \\ \hline
300                           & 300                            & 315                             \\ \hline
\end{tabular}
\end{table}

The difference between the expected and measured distances grows larger as the distance increases. Minor anomalies in the data are expected due to sensor noise and environmental factors, but the overall trend shows increased distortion at longer distances.

\subsection{Determining the Correct Speed of Sound}

To achieve higher accuracy in distance measurement, a key step is to determine the actual speed of sound under the specific conditions. By rearranging the equation, we can make the speed of sound the subject:
\[
v = \frac{2 \cdot d}{t}
\]

The MATLAB script provided below samples different distances and measures the time taken for the sound to return. By calculating the speed of sound at various distances and averaging the values, we can obtain a more accurate speed of sound for the given environment. \\\\\textbf{MATLAB Code:}

% Define custom settings for lstlisting
\lstset{
    language=Matlab,                     % Set the language to MATLAB
    backgroundcolor=\color{lightgray},   % Set background color for the code box
    frame=single,                        % Add a frame around the code
    basicstyle=\ttfamily,                % Use a typewriter font
    keywordstyle=\color{blue},           % Set keyword color
    commentstyle=\color[RGB]{0,128,0},   % Dark green color for comments
    caption=MATLAB Code,                 % Caption for the code
    breaklines=true,                     % Enable line breaking
    breakatwhitespace=true,              % Allow line breaks at whitespace
    showspaces=false,                    % Do not show spaces as symbols
}


\begin{lstlisting}
% Initialize connection to Arduino
a = arduino('COM3', 'Leonardo');  % Replace 'COM3' with your actual port
triggerPin = 'D9';
echoPin = 'D10';

% Define known distances (in meters)
distances = [0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 1.0];  % Known distances

% Initialize an empty array to store time values
time_values = zeros(1, length(distances));

% Loop through the number of measurements (one for each distance)
for i = 1:length(distances)
    disp(['Place the object at ' num2str(distances(i)) ' meters']);
    pause(10);  % Give time to adjust the object
    
    % Take measurement from the HC-SR04 sensor
    time_taken = readUltrasonicDistance(a, triggerPin, echoPin);  % Time taken (in seconds)
    
    % Store the recorded time
    time_values(i) = time_taken;
    
    % Display the recorded time for user feedback
    disp(['Time recorded for ' num2str(distances(i))'meters: ' num2str(time_taken) 'seconds']);
    
    pause(1);  % Pause before the next measurement
end

% Calculate speed of sound for each distance using v = 2 * d / t
speed_of_sound_values = (2 .* distances) ./ time_values;

% Calculate the mean speed of sound
mean_speed_of_sound = mean(speed_of_sound_values);

% Display results
disp('Recorded time values (in seconds):');
disp(time_values);

disp('Speed of sound values for each distance (in m/s):');
disp(speed_of_sound_values);

disp('Mean speed of sound (in m/s):');
disp(mean_speed_of_sound);

% Clean up the connection
clear a;
\end{lstlisting}


\subsection{Improved Results with Calculated Speed of Sound}

Using the calculated mean speed of sound, we can improve the accuracy of our distance measurements. By plotting the results with the correct speed of sound (e.g., 343 m/s) versus the calculated speed of sound (e.g., 342 m/s), the data points align more closely, as seen in Figure~\ref{fig:calibrated_graph}.

\begin{figure}[h]
    \centering
    % Assuming another graph will be inserted here showing the improved accuracy with calculated speed of sound
    \includegraphics[width=0.5\textwidth]{calibrated_sound_example.png}
    \caption{Distance vs Time: Improved Accuracy with Calculated Speed of Sound}
    \label{fig:calibrated_graph}
\end{figure}

This graph demonstrates that with a more accurate speed of sound, the measured values align closely with the expected values, leading to better sensor performance and fewer distortions over long distances.

\subsection{Conclusion}

By determining and using the correct speed of sound, we improve the accuracy of our ultrasonic sensor system, especially for long distances. The MATLAB script allows us to characterize the sensor in the environment, leading to more precise applications in real-world scenarios.



\section{Sensor, Servo and Warning System Integration}

\begin{figure}[h]
    \centering
    \includegraphics[width=1.1\textwidth]{Ultrasonic Servomotor-Algo & Logic.png} % Adjust width as necessary
    \caption{Flowchart of the Pan Angle Routine}
    \label{fig:flowchart}
\end{figure}

\tikzstyle{startstop} = [rectangle, rounded corners, minimum width=3cm, minimum height=1cm,text centered, draw=black]
\tikzstyle{process} = [rectangle, minimum width=3cm, minimum height=1cm, text centered, draw=black]
\tikzstyle{decision} = [diamond, minimum width=3cm, minimum height=1cm, text centered, draw=black]
\tikzstyle{arrow} = [thick,->,>=stealth]

\begin{tikzpicture}[node distance=2.5cm, auto, scale=0.7, transform shape]

    % Nodes
    \node (start) [startstop] {Start};
    \node (init) [process, below of=start] {Initialize Plot table, Sensors and Servo objects};
    \node (setthreshold) [process, below of=init] {Set obstacle\_threshold = 60cm};
    \node (while) [decision, below of=setthreshold] {While 1};
    \node (checkangle) [decision, below of=while, yshift=-1.5cm] {Is pan\_angle <= 180};
    \node (panangle) [process, right of=checkangle, xshift=3cm] {pan\_angle = pan\_angle + 1};
    \node (subroutine) [process, below of=checkangle, yshift=-1.5cm] {PanAngleSubRoutine};
    \node (end) [startstop, below of=subroutine, yshift=-1cm] {End};
    \node (isanglepos) [decision, right of=panangle, xshift=3cm] {Is pan\_angle >= 0};
    \node (subroutine2) [process, below of=isanglepos, yshift=-1cm] {PanAngleSubRoutine};
    \node (incangle) [process, below of=subroutine2, yshift=-1cm] {pan\_angle = pan\_angle + 1};

    % Arrows
    \draw [arrow] (start) -- (init);
    \draw [arrow] (init) -- (setthreshold);
    \draw [arrow] (setthreshold) -- (while);
    \draw [arrow] (while) -- node[anchor=east] {True} (checkangle);
    \draw [arrow] (checkangle.east) -- node[anchor=south] {True} (panangle.west);
    \draw [arrow] (checkangle.south) -- node[anchor=east] {False} (subroutine.north);
    \draw [arrow] (subroutine.south) -- (end.north);
    \draw [arrow] (panangle.east) -- (isanglepos.west);
    \draw [arrow] (isanglepos.south) -- node[anchor=west] {True} (subroutine2.north);
    \draw [arrow] (subroutine2.south) -- (incangle.north);
    % \draw [arrow] (incangle.south) -- (end.south);
    % \draw [arrow] (incangle.south) -- ++(0,-1) -- ++(0,-1) -- (end.south);
    \draw [arrow] (incangle.south) -- ++(0,-0.2) -- ++(-3,0) -- (end.east);


    % Arrow for False in "Is pan_angle <= 180"
    \draw [arrow] (checkangle.west) -- ++(-1.5,0) -- ++(0,-3.5) -- (end.west);
    \draw [arrow] (isanglepos.north) -- ++(0,0) -- ++(0,2) -- (while.east) node[anchor=south] {False};
\end{tikzpicture}




The algorithm implemented in this project enables the ultrasonic sensor to perform automated panning movements using a servomotor, allowing the sensor to scan the surrounding environment and detect obstacles within a specified threshold distance.

\subsection{Algorithm Overview}
\begin{enumerate}
    \item \textbf{Initialization:}
     The code mainly setups the necessary peripherals for control and sensor reading. Additionally, to visualize the obstacles on a graph, a plot table on MATLAB is created. For the warning system, the obstacle detection threshold is set at \textbf{60 cm}.

    \item \textbf{Continuous Scanning Loop:}
    While the system continuously loops, the servo pans between two angles to emulate the user's field of vision. In between the loops, a routine called \textbf{PanAngleSubRoutine} retrieves ultrasonic sensor readings and makes a decision to warn the user based on detection threshold. 
\end{enumerate}

\subsection{Parameter Determination}

\begin{itemize}
    \item \textbf{Speed of Sound:} The \textbf{speed of sound}, is a critical parameter that influences the accuracy of ultrasonic readings. The speed is adjusted after analysing the results from calibration and testing.
    \[
    d = \frac{\Delta t \times V_s}{2}
    \]
    Where:
    \begin{itemize}
        \item \( d \) is the distance to the obstacle.
        \item \( \Delta t \) is the time taken for the sound waves to travel to the object and back.
        \item \( V_s \) is the speed of sound in air (typically 343 m/s at room temperature).
    \end{itemize}

    \item \textbf{Obstacle Threshold:} The obstacle detection threshold is set at \textbf{60 cm}.

    \item \textbf{Panning Range:} The panning range is set between \textbf{50Â° and 70Â°}.
\end{itemize}

\chapter{Code}
\section{Main Code}

% Define custom settings for lstlisting
\lstset{
    language=C++,                         % Set the language to C++
    backgroundcolor=\color{lightgray},    % Set background color
    frame=single,                         % Add a frame around the code
    basicstyle=\ttfamily\footnotesize,    % Use a smaller font size (footnotesize)
    keywordstyle=\color{blue},            % Color keywords
    commentstyle=\color[RGB]{0,128,0},    % Dark green color for comments
    caption=Arduino C++ Code for Sensor Application \& Sensor Characterization,             % Caption for the code
    emph={setup, loop},                   % Specify function names to be bold
    emphstyle=\bfseries,                  % Style for emphasized text (function names)
    breaklines=true,                      % Enable line breaking
    breakatwhitespace=true,               % Allow breaking at whitespace
}

\begin{lstlisting}
#include <Servo.h>

// Define pins for the ultrasonic sensor and servo
const int trigPin = A2;   // Trigger pin for ultrasonic
const int echoPin = A3;   // Echo pin for ultrasonic
const int warningLedPin = 7; // Warning LED on pin D7
const int servoPin = 6;   // Servo pin on D6

float t=0, d=0, scale=1e-4; //add scaling calculation here

// Servo object
Servo servoX;

// Obstacle detection threshold (in cm)
const int obstacleThreshold = 60;

void setup() {
  // Initialize serial communication for debugging
  Serial.begin(9600);

  // Initialize the servo motor
  servoX.attach(servoPin);

  // Initialize the warning LED pin
  pinMode(warningLedPin, OUTPUT);
  pinMode(trigPin,OUTPUT);
  pinMode(echoPin,INPUT);
}

/**
 * \brief Reads the distance from the ultrasonic sensor
 * 
 * This function triggers the ultrasonic sensor to send a pulse
 * and measures the time of flight (TOF) for the echo. It calculates 
 * the distance based on the speed of sound and returns the computed value.
 * 
 * \return float - The measured distance in centimeters
 */
float readSensor(){
    // Generate trig pulse to start
    digitalWrite(trigPin,LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin,HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin,LOW);
  
    // Measure TOF and compute distance
    t = pulseIn(echoPin, HIGH);
    d = scale * t * 343 / 2;  // Speed of sound in cm/us

    // Print result on the serial monitor for debugging
    Serial.print("Distance: ");
    Serial.print(d);
    Serial.println(" cm");
    delay(30);
  
    return d;
}

/**
 * \brief Checks if the measured distance exceeds the obstacle threshold
 * 
 * This function compares the measured distance to the predefined 
 * obstacle threshold. If the obstacle is closer than the threshold, 
 * the warning LED is turned on, otherwise it is turned off.
 * 
 * \param dist float - The measured distance in centimeters
 */
void checkObstacleThreshold(float dist){
    if (dist < obstacleThreshold && dist > 0) { // Ensure distance is valid
      digitalWrite(warningLedPin, HIGH);  // Turn on the warning LED
    } else {
      digitalWrite(warningLedPin, LOW);  // Turn off the warning LED
    }
}

/**
 * \brief Main loop to control the servo and check for obstacles
 * 
 * This loop sweeps the servo from 50 to 70 degrees and back, measuring 
 * the distance using the ultrasonic sensor at each position. The average 
 * of two readings is computed, and if the distance is less than the obstacle 
 * threshold, the warning LED is activated.
 */
void loop() {
  // Sweep the servo from 50 to 70 degrees
  for (int angle = 50; angle <= 70; angle+=6) {
    // Move the servo to the current angle
    servoX.write(angle);
    delayMicroseconds(200);  // Allow time for the servo to move

    // Measure the distance using the ultrasonic sensor
    float dist1 = readSensor();
    delayMicroseconds(10);   // Small delay between measurements
    float dist2 = readSensor();
    float dist = (dist1 + dist2) / 2;  // Average the two distance readings

    checkObstacleThreshold(dist);  // Warn the user if distance is within obstacle threshold
  }

  // Sweep the servo back from 70 to 50 degrees
  for (int angle = 70; angle >= 50; angle-=6) {
    // Move the servo to the current angle
    servoX.write(angle);
    delayMicroseconds(200);  // Allow time for the servo to move

    // Measure the distance using the ultrasonic sensor
    float dist1 = readSensor();
    delayMicroseconds(10);   // Small delay between measurements
    float dist2 = readSensor();
    float dist = (dist1 + dist2) / 2;  // Average the two distance readings

    checkObstacleThreshold(dist);  // Warn the user if distance is within obstacle threshold
  }
}

\end{lstlisting}


% Define custom settings for lstlisting
\lstset{
    language=C++,                         % Set the language to C++
    backgroundcolor=\color{lightgray},    % Set background color
    frame=single,                         % Add a frame around the code
    basicstyle=\ttfamily\footnotesize,    % Use a smaller font size (footnotesize)
    keywordstyle=\color{blue},            % Color keywords
    commentstyle=\color[RGB]{0,128,0},    % Dark green color for comments
    caption=Arduino C++ Code for Sensor Application \& Sensor Characterization,             % Caption for the code
    emph={setup, loop},                   % Specify function names to be bold
    emphstyle=\bfseries,                  % Style for emphasized text (function names)
    breaklines=true,                      % Enable line breaking
    breakatwhitespace=true,               % Allow breaking at whitespace
}

\section{Code Snippets and Explanations}

This section presents key snippets from the Arduino code, explaining their significance and purpose in the application.

\subsection{Ultrasonic Sensor Triggering and Distance Calculation}

The following code snippet triggers the ultrasonic sensor to emit a sound wave and measures the time of flight (TOF) for the echo to return. It then calculates the distance to the obstacle using the speed of sound.

\begin{lstlisting}
// Function to read distance from ultrasonic sensor
float readSensor(){
    // Generate trig pulse to start
    digitalWrite(trigPin, LOW);          // Set trigger pin low
    delayMicroseconds(2);                // Wait 2 microseconds
    digitalWrite(trigPin, HIGH);         // Set trigger pin high to send pulse
    delayMicroseconds(10);               // Hold pulse for 10 microseconds
    digitalWrite(trigPin, LOW);          // Stop pulse
    
    // Measure Time of Flight (TOF)
    t = pulseIn(echoPin, HIGH);          // Capture the duration for echo return
    
    // Calculate the distance using the speed of sound in air (343 m/s)
    d = scale * t * 343 / 2;             // Distance = (TOF * speed of sound) / 2
    
    // Display the calculated distance on serial monitor
    Serial.print("Distance: ");
    Serial.print(d);
    Serial.println(" cm");
    
    return d;                            // Return the measured distance
}
\end{lstlisting}

\textbf{Explanation:}  
This function sends a pulse through the ultrasonic sensor using the `trigPin` and measures how long it takes for the echo to return via `echoPin`. The time measured (\texttt{t}) is then used to calculate the distance \(d\) based on the formula:
\[
\text{Distance} = \frac{\Delta t \times 343}{2}
\]
where \(343 \, \text{m/s}\) is the speed of sound in air at room temperature. The result is printed on the serial monitor for debugging purposes.

\subsection{Servo Sweeping Mechanism and Distance Averaging}

The code snippet below sweeps the servo motor across a specified range of angles, takes multiple readings from the ultrasonic sensor, and computes the average distance for better accuracy.

\begin{lstlisting}
// Sweep the servo and measure distance at each position
for (int angle = 50; angle <= 70; angle += 6) {
    servoX.write(angle);                 // Move the servo to the current angle
    delayMicroseconds(200);              // Delay to allow the servo to move
    
    // Read the distance twice to reduce noise
    float dist1 = readSensor();          // First distance reading
    delayMicroseconds(10);               // Short delay between readings
    float dist2 = readSensor();          // Second distance reading
    
    // Compute the average distance
    float dist = (dist1 + dist2) / 2;    // Average the two distance readings
    
    // Check if obstacle is within the defined threshold
    checkObstacleThreshold(dist);        // Function to warn if within threshold
}
\end{lstlisting}

\textbf{Explanation:}  
This loop moves the servo motor from 50 degrees to 70 degrees in increments of 6 degrees. At each position, the ultrasonic sensor measures the distance twice, and the average of the two readings is computed to minimize measurement noise. This helps ensure more accurate detection of obstacles. The distance is then checked against the obstacle threshold (60 cm), and if the obstacle is too close, a warning (LED) is triggered.

\subsection{Obstacle Detection and LED Warning}

The code snippet checks whether the measured distance is below the defined threshold and activates a warning LED if an obstacle is detected.

\begin{lstlisting}
// Function to check if the obstacle is within threshold distance
void checkObstacleThreshold(float dist) {
    if (dist < obstacleThreshold && dist > 0) {  // If distance is valid and below threshold
        digitalWrite(warningLedPin, HIGH);       // Turn on the warning LED
    } else {
        digitalWrite(warningLedPin, LOW);        // Turn off the warning LED
    }
}
\end{lstlisting}

\textbf{Explanation:}  
This function compares the measured distance \texttt{dist} to the predefined threshold value \texttt{obstacleThreshold} (60 cm). If the object is detected within this range and the distance is valid (greater than 0), the warning LED connected to \texttt{warningLedPin} is turned on. If the object is farther away or no valid reading is detected, the LED remains off.

\subsection{Setup Function}

The setup function initializes the servo motor, LED, and ultrasonic sensor for the obstacle detection system.

\begin{lstlisting}
// Setup function to initialize components
void setup() {
    Serial.begin(9600);                   // Initialize serial communication
    servoX.attach(servoPin);              // Attach servo to the designated pin
    pinMode(warningLedPin, OUTPUT);       // Set LED pin as output
    pinMode(trigPin, OUTPUT);             // Set ultrasonic trigger pin as output
    pinMode(echoPin, INPUT);              // Set ultrasonic echo pin as input
}
\end{lstlisting}

\textbf{Explanation:}  
This function sets up the necessary components:
- The servo motor is attached to its designated pin using \texttt{servoX.attach()}.
- The warning LED pin is set to output mode.
- The trigger pin for the ultrasonic sensor is set as an output, and the echo pin is set as an input.
- Serial communication is initialized to print data to the serial monitor.

\subsection{Speed of Sound Calculation}

In the distance calculation, the speed of sound in air is used to convert the time of flight into a measurable distance.

\begin{lstlisting}
d = scale * t * 343 / 2;  // Distance = TOF * speed of sound / 2
\end{lstlisting}

\textbf{Explanation:}  
This formula calculates the distance using the time of flight (\texttt{t}) and the speed of sound in air (\(343 \, \text{m/s}\)). The factor of 2 accounts for the round trip of the sound wave (to the object and back). The scaling factor \texttt{scale} ensures that the time is appropriately converted from microseconds to a distance in centimeters.


\chapter{Testing and Results}

\section{Overview}
This section aims to characterize the ultrasonic sensor by examining its performance under various conditions, including its deadband in close proximity, maximum measurable distance, and accuracy influenced by environmental temperature and humidity. To ensure measurement accuracy, the actual speed of sound, affected by these environmental factors, is determined and used for calibration.\\\\Additionally, a test case regarding firefighting application with an ultrasonic sensor is done to evaluate the performance of the sensor in thick smoke conditions.\\\\The test cases are summarized in the follow keypoints:


\begin{itemize}
    \item Comparison between expected distances and measured distance (accuracy)
    \item Testing the minimum detectable distance (close proximity)
    \item Testing the maximum detectable distance (range limit)
    \item Evaluation of object sensing in conditions with smoke (Firefighting application)
\end{itemize}

    
\section{Testing Setup}
Describe the environment used for testing:
\begin{figure}[H]
    \centering
    \includegraphics[width=0.35\linewidth]{Test room.jpg}
    \caption{Testing room}
    \label{fig:enter-label}
\end{figure}
\begin{itemize}
    \item \textbf{Location:} Living room, flat surface, 9 metres length and 5 metres wide of space for testing. 
    \item \textbf{Challenges:} 
    \begin{itemize}
        \item \textbf{Sensor Accuracy:} Initial distance measurements showed slight discrepancies, primarily due to variations in environmental temperature and humidity. These factors affected the speed of sound, requiring adjustments on the speed of sound in code to achieve accurate readings.
    \end{itemize}
\end{itemize}


\section{Results}
\subsection{Sensor Characterization: Accuracy}
A scatter plot with a trend line was used to determine the speed of sound under the test room conditions, yielding \textbf{a value of 326 m/s at 30Â°C.}
\begin{figure}[H]
    \centering
    \includegraphics[width=1\linewidth]{Trendgraph_ultrasonicreadings.png}
    \caption{Ultrasonic Sensor Accuracy Trend}
    \label{fig:trend-graph}
\end{figure}

\subsection{Sensor Characterization: Close Proximity}
The sensor detects objects at a minimum distance of \textbf{1.5 cm}. Distances below \textbf{1 cm} fall within its "dead band," producing errors like "985 cm" and "900 cm." Although the HC-SR04's specified dead band is \textbf{2 cm}, this variation may be due to manufacturing quality. However, in the firefighting scenario, close proximity of 2 cm or less is not an issue, as the threshold is set at \textbf{60 cm}, providing sufficient room for the firefighter to maneuver.


\begin{figure}[H]
    \centering
    \includegraphics[width=0.25\linewidth]{maximumrange.jpg}
    \caption{Maximum range: 414cm}
    \label{fig:enter-label}
\end{figure}

\subsection{Sensor Characterization: Maximum Range}
The maximum detection range was found to be \textbf{414 cm}, beyond which the sensor fails to detect the marker and may pick up other objects. In the firefighting application, this range is sufficient, as the alert threshold is set at \textbf{60 cm}, allowing the firefighter ample room to avoid obstacles.


\subsection{Sensor Application: Firefighting Scenario}

\begin{figure}[H]
    \centering
    \begin{subfigure}[b]{0.3\linewidth}
        \centering
       \raisebox{0.5cm}{\includegraphics[width=\linewidth]{Threshold Test 0.png}}
        \caption{Outside detection range.}
        \label{fig:safe-zone}
    \end{subfigure}
    \hfill
    \begin{subfigure}[b]{0.3\linewidth}
        \centering
        \includegraphics[width=\linewidth]{Threshold Test 1.png}
        \caption{LED triggered within threshold.}
        \label{fig:threshold-warning}
    \end{subfigure}
    \hfill
    \begin{subfigure}[b]{0.3\linewidth}
        \centering
        \includegraphics[width=\linewidth]{Threshold Test 3.png}
        \caption{Outside field of view range.}
        \label{fig:within-threshold}
    \end{subfigure}
    
    \caption{Various states of obstacle detection using the ultrasonic sensor helmet system.}
    \label{fig:combined-images}
\end{figure}



\subsubsection{Threshold Test}
The sensor's detection threshold was set at \textbf{60 cm} to provide adequate warning and maneuvering space for the firefighter. During testing, the sensor reliably detected obstacles within this range, triggering the red warning LED to switch ON.
\begin{figure}[H]
    \centering
    \begin{subfigure}[b]{0.45\linewidth}
        \centering
        \includegraphics[height=5cm]{Helmet with smoke.PNG}  % Adjust height as necessary
        \caption{LED ON during smoke exposure.}
        \label{fig:led-on}
    \end{subfigure}
    \hfill
    \begin{subfigure}[b]{0.45\linewidth}
        \centering
        \includegraphics[height=5cm]{Smoke condition test.png}  % Adjust height as necessary
        \caption{System when worn during smoke test.}
        \label{fig:smoke-test}
    \end{subfigure}
    
    \caption{Alternate views of LED activation and the system during smoke test.}
    \label{fig:led-smoke-comparison}
\end{figure}
\subsubsection{Smoke Condition Test}
In a smoke-filled box simulating firefighting conditions, the \textbf{sensor successfully detected obstacles}, demonstrating its potential for accurate detection in low-visibility environments. When obstacles were detected within the 60 cm threshold, the red warning LED was activated.\\\\These tests characterize the ultrasonic sensor's capabilities, guiding its effective application for obstacle detection in conditions where LIDAR and camera is less effective.






\chapter{Conclusion}
\vspace{-1.5em} % Adjust this value to control the spacing
\section{Project Summary}

This project demonstrated the effectiveness of ultrasonic sensors for obstacle detection in smoke-filled environments. Reliable distance measurements were obtained across varying conditions, with consistent accuracy. The system provided real-time visual feedback through an LED and utilized a servomotor for automated panning, expanding the sensor's field of view. These results highlight the potential of ultrasonic sensors in low-visibility scenarios and lay the groundwork for future improvements.





\section{Challenges}

During the project, several challenges were encountered:

\begin{itemize}
\item \textbf{Speed of Sound Variations}: The sensor readings \textbf{showed deviations of Â±2 cm and more}, primarily due to environmental factors like temperature and humidity affecting the speed of sound.

\textbf{\textit{Solution:}} To improve accuracy, the actual speed of sound was calculated by determining the slope from the relationship between measured and actual readings, accounting for the specific temperature and humidity conditions in each environment.

    
\item \textbf{Field of View (FOV) and Accuracy Tradeoff}: The initial wide FOV was unnecessary, as it included areas outside the user's direct path (his sides), leading to false positives. This caused the detection system to misidentify obstacles, resulting in blinking of the warning system.

\textbf{\textit{Solution:}} The FOV was narrowed to focus solely on the path in front of the user, \textbf{reducing false positives} and improving overall detection accuracy.
    
\end{itemize}


\section{Future Improvements}

\begin{itemize}

    \item \textbf{Automatic Speed of Sound Adjustment:} Integrating temperature and humidity sensors to automatically tune the speed of sound variable in real-time, ensuring accurate distance measurements regardless of environmental conditions.
    
    \item \textbf{Sensor Fusion for Enhanced Robotic Applications:} With the current sensors on robotic platforms, the addition of an ultrasonic sensor would be advantageous for navigating conditions where LiDAR and cameras are less effective. Such as foggy, smoky or dusty environments. This is particularly ideal for unmanned rescue missions, where navigating through hazardous conditions is crucial to fulfill mission objectives.
\end{itemize}


\appendix
\chapter{Appendix}
\section{Presentation Slides}
Add any additional diagrams or illustrations that may help explain the system.

\section{Additional Code}
Include any supplementary code, if applicable (e.g., code for a servo motor or buzzer).

\end{document}
